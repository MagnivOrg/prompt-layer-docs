{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/prompt-templates/{identifier}": {
      "post": {
        "tags": [
          "prompt-templates"
        ],
        "summary": "Get Prompt Template by ID",
        "operationId": "get_prompt_templates__prompt_identifier__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            },
            "name": "X-API-KEY",
            "in": "header"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "identifier",
              "description": "The identifier can be either the prompt name or the prompt id."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/GetPromptTemplate"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/prompt-templates/{identifier}/labels": {
      "get": {
        "tags": [
          "prompt-templates",
          "release-labels"
        ],
        "summary": "Get Prompt Template Labels",
        "operationId": "get_prompt_templates_labels_prompt_identifier__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            },
            "name": "X-API-KEY",
            "in": "header"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "identifier",
              "description": "The identifier can be either the prompt name or the prompt id."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptTemplateLabelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/prompts/{prompt_id}/label": {
      "post": {
        "tags": [
          "prompts",
          "labels"
        ],
        "summary": "Create a new label for a prompt",
        "operationId": "create_prompt_label",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "prompt_id"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_version_number": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "prompt_version_number",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "prompt_id": {
                      "type": "integer"
                    },
                    "prompt_version_id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "created_at",
                    "id",
                    "name",
                    "prompt_id",
                    "prompt_version_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/prompt-labels/{prompt_label_id}": {
      "patch": {
        "tags": [
          "prompt-templates",
          "release-labels"
        ],
        "summary": "Move Prompt Template Labels",
        "operationId": "prompt_templates_labels_prompt_label_id__patch",
        "parameters": [
          {
            "name": "prompt_label_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "prompt_label_id"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_version_number": {
                    "type": "integer"
                  }
                },
                "required": [
                  "prompt_version_number"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "prompt_id": {
                      "type": "integer"
                    },
                    "prompt_version_id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "created_at",
                    "id",
                    "name",
                    "prompt_id",
                    "prompt_version_id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "prompt-templates",
          "release-labels"
        ],
        "summary": "Delete Prompt Template Label",
        "operationId": "delete_prompt_templates_labels_prompt_label_id",
        "parameters": [
          {
            "name": "prompt_label_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "prompt_label_id"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/prompt-templates": {
      "post": {
        "tags": [
          "rest",
          "prompt-templates"
        ],
        "summary": "Publish Prompt Template",
        "operationId": "publish_prompt_template_rest_prompt_templates_post",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rest/track-metadata": {
      "post": {
        "summary": "Track Metadata",
        "operationId": "trackMetadata",
        "tags": [
          "metadata"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "type": "string",
                    "description": "Your PromptLayer API Key."
                  },
                  "request_id": {
                    "type": "integer",
                    "description": "The unique identifier for the request to which the metadata is associated."
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "A dictionary of metadata items to associate with the request. Can include session_ids, user_ids, location, etc."
                  }
                },
                "required": [
                  "api_key",
                  "request_id",
                  "metadata"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rest/track-group": {
      "post": {
        "summary": "Track Group",
        "operationId": "trackGroup",
        "tags": [
          "group"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "type": "string",
                    "description": "Your PromptLayer API Key."
                  },
                  "request_id": {
                    "type": "integer",
                    "description": "The unique identifier for the request."
                  },
                  "group_id": {
                    "type": "integer",
                    "description": "The unique identifier for the group to be associated with the request."
                  }
                },
                "required": [
                  "api_key",
                  "request_id",
                  "group_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rest/track-prompt": {
      "post": {
        "summary": "Track Prompt",
        "operationId": "trackPrompt",
        "tags": [
          "prompt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "type": "string",
                    "description": "Your PromptLayer API Key.",
                    "minLength": 1
                  },
                  "prompt_name": {
                    "type": "string",
                    "description": "The name of the prompt template.",
                    "minLength": 1
                  },
                  "prompt_input_variables": {
                    "type": "object",
                    "description": "Input variables for the prompt template.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "optional": true
                  },
                  "request_id": {
                    "type": "integer",
                    "description": "The unique identifier for the request."
                  },
                  "version": {
                    "type": "integer",
                    "description": "The version of the prompt template. Both version and label cannot be specified. Only one or none.",
                    "optional": true
                  },
                  "label": {
                    "type": "string",
                    "description": "The label of the prompt template version. Both version and label cannot be specified. Only one or none.",
                    "minLength": 1,
                    "maxLength": 512,
                    "optional": true
                  }
                },
                "required": [
                  "api_key",
                  "prompt_name",
                  "request_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rest/track-score": {
      "post": {
        "summary": "Track Score",
        "operationId": "trackScore",
        "tags": [
          "score"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request_id": {
                    "type": "integer",
                    "description": "The `request_id` from tracking a request."
                  },
                  "score": {
                    "type": "integer",
                    "description": "The score you would like to give to this request (0 - 100).",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for this request score. If not provided, the score will be tracked as `default`.",
                    "optional": true
                  },
                  "api_key": {
                    "type": "string",
                    "description": "Your PromptLayer API Key."
                  }
                },
                "required": [
                  "request_id",
                  "score",
                  "api_key"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Score tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/reports/name/{report_name}": {
      "delete": {
        "summary": "Delete Reports by Name",
        "operationId": "deleteReportsByName",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "name": "report_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the report to archive."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports": {
      "post": {
        "summary": "Create Evaluation Pipeline",
        "operationId": "createEvaluationPipeline",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the report to be created. Must be between 1 and 255 characters in length.",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "test_dataset_id": {
                    "type": "integer",
                    "description": "The ID of the dataset on which the report will be based. The dataset must be within an accessible workspace to the user."
                  }
                },
                "required": [
                  "name",
                  "test_dataset_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Evaluation Pipeline created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "report_id": {
                      "type": "integer",
                      "description": "The ID of the created report."
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "report_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/reports/{report_id}/run": {
      "post": {
        "summary": "Run Full Evaluation",
        "operationId": "runReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the evaluation pipeline report to run."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the final report to be created. Must be between 1 and 255 characters in length.",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "dataset_id": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "The ID of the dataset to use for the report. If not provided, uses the evaluation pipeline's default dataset."
                  },
                  "refresh_dataset": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "description": "Whether to refresh the dataset before running the report. Only applicable for dynamic datasets."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report run initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "report_id": {
                      "type": "integer",
                      "description": "The ID of the created final report."
                    }
                  },
                  "required": [
                    "success",
                    "report_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data or report generation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No requests found for the given criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Can only run evaluation pipeline reports or dataset refresh not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Report or dataset not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/{report_id}": {
      "get": {
        "summary": "Get Evaluation",
        "operationId": "getReport",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the report to retrieve."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "responses": {
          "200": {
            "description": "Report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "report": {
                      "type": "object",
                      "description": "The report data with all fields",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "comment": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "is_blueprint": {
                          "type": [
                            "boolean",
                            "null"
                          ]
                        },
                        "deleted": {
                          "type": "boolean"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "score": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "Report score data"
                        },
                        "score_configuration": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "Score configuration settings"
                        },
                        "score_matrix": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "description": "Score matrix for custom scoring"
                        },
                        "score_calculation_error": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Error message if score calculation failed"
                        },
                        "parent_report_id": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "dataset_id": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "user_id": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "workspace_id": {
                          "type": "integer"
                        },
                        "prompt_registry_id": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "ID of associated prompt registry"
                        },
                        "prompt_version_number": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Version number of associated prompt"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "deleted",
                        "created_at",
                        "updated_at",
                        "workspace_id"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "RUNNING",
                        "COMPLETED"
                      ],
                      "description": "Overall status of the report execution"
                    },
                    "stats": {
                      "type": "object",
                      "properties": {
                        "status_counts": {
                          "type": "object",
                          "description": "Count of cells in each status",
                          "properties": {
                            "COMPLETED": {
                              "type": "integer",
                              "description": "Number of completed cells"
                            },
                            "FAILED": {
                              "type": "integer",
                              "description": "Number of failed cells"
                            },
                            "QUEUED": {
                              "type": "integer",
                              "description": "Number of queued cells"
                            },
                            "RUNNING": {
                              "type": "integer",
                              "description": "Number of running cells"
                            }
                          },
                          "required": [
                            "COMPLETED",
                            "FAILED",
                            "QUEUED",
                            "RUNNING"
                          ]
                        }
                      },
                      "required": [
                        "status_counts"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "report",
                    "status",
                    "stats"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication"
          },
          "404": {
            "description": "Report not found or not accessible"
          }
        }
      }
    },
    "/reports/{report_id}/score": {
      "get": {
        "summary": "Get Evaluation Score",
        "operationId": "getReportScore",
        "tags": [
          "reports"
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the report to get the score for."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "responses": {
          "200": {
            "description": "Report score retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "score": {
                      "type": "object",
                      "properties": {
                        "overall_score": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "description": "The overall score of the report"
                        },
                        "score_type": {
                          "type": "string",
                          "enum": [
                            "single_column",
                            "multi_column",
                            "custom",
                            "none"
                          ],
                          "description": "Type of scoring used for this report"
                        },
                        "has_custom_scoring": {
                          "type": "boolean",
                          "description": "Whether custom scoring logic was used"
                        },
                        "details": {
                          "type": "object",
                          "oneOf": [
                            {
                              "description": "Single column score details",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "score": {
                                  "type": [
                                    "number",
                                    "null"
                                  ]
                                },
                                "score_type": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "num_skipped": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "description": "Multi-column score details",
                              "properties": {
                                "columns": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "column_name": {
                                        "type": "string"
                                      },
                                      "score": {
                                        "type": [
                                          "number",
                                          "null"
                                        ]
                                      },
                                      "score_type": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "num_skipped": {
                                        "type": "integer"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "description": "Custom score details",
                              "properties": {
                                "matrix": {
                                  "type": "array",
                                  "description": "Score matrix from custom scoring logic"
                                },
                                "configuration": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "description": "Custom scoring configuration"
                                }
                              }
                            },
                            {
                              "description": "No score details",
                              "properties": {
                                "message": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "overall_score",
                        "score_type",
                        "has_custom_scoring",
                        "details"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "score"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Blueprint reports do not have scores"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid workspace"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/api/public/v2/datasets": {
      "get": {
        "summary": "List Datasets",
        "operationId": "listDatasets",
        "tags": [
          "datasets"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key or JWT token for authentication. Use 'X-API-KEY' header for API key or 'Authorization: Bearer' header for JWT."
          },
          {
            "name": "dataset_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific dataset group ID"
          },
          {
            "name": "prompt_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific prompt ID"
          },
          {
            "name": "prompt_version_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific prompt version ID"
          },
          {
            "name": "prompt_label_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific prompt label ID"
          },
          {
            "name": "workspace_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific workspace ID. If not provided, uses the current user's workspace"
          },
          {
            "name": "report_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Filter by specific report ID (includes parent report ID)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "datasets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dataset"
                      }
                    },
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "datasets",
                    "page",
                    "per_page",
                    "total",
                    "pages"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid workspace_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/public/v2/dataset-groups": {
      "post": {
        "summary": "Create Dataset Group",
        "operationId": "createDatasetGroup",
        "tags": [
          "datasets"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key or JWT token for authentication. Use 'X-API-KEY' header for API key or 'Authorization: Bearer' header for JWT."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the dataset group. Must be unique within the workspace."
                  },
                  "workspace_id": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "ID of the workspace where the dataset group will be created"
                  }
                },
                "required": [
                  "name",
                  "workspace_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dataset group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "dataset_group": {
                      "$ref": "#/components/schemas/DatasetGroup"
                    },
                    "dataset": {
                      "$ref": "#/components/schemas/Dataset"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "dataset_group",
                    "dataset"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid workspace_id or dataset with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/public/v2/dataset-versions/from-file": {
      "post": {
        "summary": "Create Dataset Version from File",
        "operationId": "createDatasetVersionFromFile",
        "tags": [
          "datasets"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key for authentication. This endpoint supports API key authentication only."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dataset_group_id": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "ID of the dataset group where the new version will be created"
                  },
                  "file_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Name of the file being uploaded (must end with .csv or .json)"
                  },
                  "file_content_base64": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Base64 encoded content of the file. Maximum file size: 100MB. Supported formats: CSV, JSON"
                  }
                },
                "required": [
                  "dataset_group_id",
                  "file_name",
                  "file_content_base64"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dataset version creation job queued",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "dataset_id": {
                      "type": "integer",
                      "description": "ID of the created draft dataset"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "dataset_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid file format, file too large, or invalid base64 encoding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to this dataset group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dataset group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to upload file or create dataset version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/public/v2/dataset-versions/from-filter-params": {
      "post": {
        "summary": "Create Dataset Version from Filter Params",
        "operationId": "createDatasetVersionFromFilterParams",
        "tags": [
          "datasets"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "API key for authentication. This endpoint supports API key authentication only."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dataset_group_id": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "ID of the dataset group where the new version will be created"
                  },
                  "variables_to_parse": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of variables to parse from the request logs"
                  },
                  "prompt_id": {
                    "type": "integer",
                    "description": "Filter by specific prompt ID"
                  },
                  "prompt_version_id": {
                    "type": "integer",
                    "description": "Filter by specific prompt version ID"
                  },
                  "prompt_label_id": {
                    "type": "integer",
                    "description": "Filter by specific prompt label ID"
                  },
                  "workspace_id": {
                    "type": "integer",
                    "description": "Filter by specific workspace ID"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Filter logs after this timestamp (ISO format)"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Filter logs before this timestamp (ISO format)"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Filter by specific tags"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Filter by metadata key-value pairs"
                  },
                  "scores": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "type": "number"
                        },
                        "max": {
                          "type": "number"
                        }
                      }
                    },
                    "description": "Filter by score ranges"
                  }
                },
                "required": [
                  "dataset_group_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dataset version creation job queued",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "dataset_id": {
                      "type": "integer",
                      "description": "ID of the created draft dataset"
                    },
                    "dataset_group_id": {
                      "type": "integer",
                      "description": "ID of the dataset group"
                    },
                    "version_number": {
                      "type": "integer",
                      "description": "Version number of the dataset (-1 for draft)"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "dataset_id",
                    "dataset_group_id",
                    "version_number"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied to this dataset group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dataset group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prompt-templates": {
      "get": {
        "tags": [
          "prompt-templates"
        ],
        "summary": "Get All",
        "operationId": "get_all_prompt_templates__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            },
            "name": "X-API-KEY",
            "in": "header"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "title": "Page"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPromptTemplates"
                }
              }
            }
          }
        }
      }
    },
    "/log-request": {
      "post": {
        "tags": [
          "request"
        ],
        "summary": "Log Request",
        "operationId": "logRequest",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        }
      }
    },
    "/workflow-version-execution-results": {
      "get": {
        "summary": "Get Workflow Version Execution Results",
        "operationId": "getWorkflowVersionExecutionResults",
        "tags": [
          "workflow"
        ],
        "parameters": [
          {
            "name": "workflow_version_execution_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The unique identifier of the workflow version execution whose results you want to retrieve."
          },
          {
            "name": "return_all_outputs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "When set to true, the response includes all output nodes' results. If omitted or set to false, only the main output is returned."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key for authentication."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with execution results.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "The status of the node execution."
                          },
                          "value": {
                            "description": "The output value of the node."
                          },
                          "error_message": {
                            "type": "string",
                            "nullable": true,
                            "description": "Error message if the node failed."
                          },
                          "raw_error_message": {
                            "type": "string",
                            "nullable": true,
                            "description": "Raw error message if the node failed."
                          },
                          "is_output_node": {
                            "type": "boolean",
                            "description": "Whether this node is an output node."
                          }
                        }
                      }
                    },
                    {
                      "description": "The main output value of the workflow execution when return_all_outputs is false."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/workflows": {
      "get": {
        "summary": "List Workflows",
        "operationId": "listWorkflows",
        "tags": [
          "workflow"
        ],
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key for authentication."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination."
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 30
            },
            "description": "Number of items per page."
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflows retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique identifier for the workflow"
                          },
                          "workspace_id": {
                            "type": "integer",
                            "description": "ID of the workspace this workflow belongs to"
                          },
                          "user_id": {
                            "type": "integer",
                            "nullable": true,
                            "description": "ID of the user who created this workflow"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the workflow"
                          },
                          "is_deleted": {
                            "type": "boolean",
                            "description": "Whether the workflow is deleted"
                          },
                          "latest_version_number": {
                            "type": "integer",
                            "nullable": true,
                            "description": "The latest version number of the workflow"
                          },
                          "release_labels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Array of release label names associated with the workflow"
                          }
                        },
                        "required": [
                          "id",
                          "workspace_id",
                          "name",
                          "is_deleted",
                          "release_labels"
                        ]
                      }
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number"
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of items per page"
                    },
                    "total": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Total number of items"
                    },
                    "pages": {
                      "type": "integer",
                      "description": "Total number of pages"
                    },
                    "has_next": {
                      "type": "boolean",
                      "description": "Whether there is a next page"
                    },
                    "has_prev": {
                      "type": "boolean",
                      "description": "Whether there is a previous page"
                    },
                    "next_num": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Next page number if available"
                    },
                    "prev_num": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Previous page number if available"
                    }
                  },
                  "required": [
                    "items",
                    "page",
                    "per_page",
                    "pages",
                    "has_next",
                    "has_prev"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid pagination parameters"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid API key"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{workflow_name}/run": {
      "post": {
        "summary": "Run Workflow",
        "operationId": "runWorkflow",
        "tags": [
          "workflow"
        ],
        "parameters": [
          {
            "name": "workflow_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the workflow to execute."
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Your API key for authentication."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkflow"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow execution created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunWorkflowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/spans-bulk": {
      "post": {
        "tags": [
          "spans"
        ],
        "summary": "Create Spans Bulk",
        "operationId": "createSpansBulk",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key"
            },
            "description": "API key to authorize the operation."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSpansBulk"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSpansBulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    },
    "schemas": {
      "RunWorkflow": {
        "type": "object",
        "properties": {
          "workflow_label_name": {
            "type": "string",
            "nullable": true,
            "description": "Specify a workflow label name to run a specific labeled version."
          },
          "workflow_version_number": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a workflow version number to run a specific version."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "A dictionary of metadata key-value pairs."
          },
          "input_variables": {
            "type": "object",
            "additionalProperties": true,
            "default": {},
            "description": "A dictionary of input variables required by the workflow."
          },
          "return_all_outputs": {
            "type": "boolean",
            "default": false,
            "description": "If set to `true`, all outputs from the workflow execution will be returned."
          }
        },
        "required": [],
        "description": "Parameters to run a workflow."
      },
      "RunWorkflowResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful."
          },
          "message": {
            "type": "string",
            "description": "A message describing the result."
          },
          "warning": {
            "type": "string",
            "nullable": true,
            "description": "Any warnings about missing input variables."
          },
          "workflow_version_execution_id": {
            "type": "integer",
            "description": "The ID of the created workflow execution."
          }
        },
        "required": [
          "success",
          "message",
          "workflow_version_execution_id"
        ],
        "description": "Response after initiating a workflow execution."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false,
            "description": "Indicates that the request failed."
          },
          "error": {
            "type": "string",
            "description": "Error message explaining why the request failed."
          }
        },
        "required": [
          "success",
          "error"
        ],
        "description": "Error response format."
      },
      "Base": {
        "properties": {
          "page": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Page",
            "default": 1
          },
          "per_page": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Per Page",
            "default": 30
          }
        },
        "type": "object",
        "title": "Base"
      },
      "Function": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "default": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Function"
      },
      "FunctionCall": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "FunctionCall"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Model": {
        "title": "Model",
        "type": "object",
        "properties": {
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "parameters": {
            "title": "Parameters",
            "default": {},
            "type": "object"
          }
        },
        "required": [
          "provider",
          "name"
        ]
      },
      "Metadata": {
        "title": "Metadata",
        "type": "object",
        "properties": {
          "model": {
            "$ref": "#/components/schemas/Model"
          },
          "customField": {
            "type": "string"
          }
        },
        "definitions": {
          "Model": {
            "title": "Model",
            "type": "object",
            "properties": {
              "provider": {
                "title": "Provider",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "type": "string"
              },
              "parameters": {
                "title": "Parameters",
                "default": {},
                "type": "object"
              }
            },
            "required": [
              "provider",
              "name"
            ]
          }
        }
      },
      "GetPromptTemplate": {
        "properties": {
          "version": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "workspace_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workspace Id"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "openai",
                  "anthropic"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "input_variables": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Variables"
          },
          "metadata_filters": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata Filters",
            "description": "Optional dictionary of key values used for A/B release labels."
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modal",
            "description": "Optional model name used for returning default parameters with llm_kwargs."
          },
          "model_parameter_overrides": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Model Parameter Overrides",
            "description": "Optional dictionary of model parameter overrides to use with the prompt template. This will override the parameters at runtime for the specified model and will try to make srue the model supports these parameters. For example, if you supply `maxOutputTokens` for OpenAI, it will be converted to `max_completion_tokens`."
          }
        },
        "type": "object",
        "title": "GetPromptTemplate"
      },
      "CompletionPrompt": {
        "additionalProperties": true,
        "properties": {
          "content": {
            "items": {
              "discriminator": {
                "mapping": {
                  "image_url": "#/components/schemas/ImageContent",
                  "text": "#/components/schemas/TextContent",
                  "thinking": "#/components/schemas/ThinkingContent"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ThinkingContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                },
                {
                  "$ref": "#/components/schemas/MediaContent"
                },
                {
                  "$ref": "#/components/schemas/MediaVariable"
                }
              ]
            },
            "title": "Content",
            "type": "array"
          },
          "input_variables": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Input Variables",
            "type": "array"
          },
          "template_format": {
            "default": "f-string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "type": "string"
          },
          "type": {
            "const": "completion",
            "default": "completion",
            "enum": [
              "completion"
            ],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "title": "Completion Template",
        "type": "object"
      },
      "TextContent": {
        "properties": {
          "type": {
            "const": "text",
            "default": "text",
            "enum": [
              "text"
            ],
            "title": "Type",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "TextContent",
        "type": "object"
      },
      "ThinkingContent": {
        "properties": {
          "type": {
            "const": "thinking",
            "default": "thinking",
            "enum": [
              "thinking"
            ],
            "title": "Type",
            "type": "string"
          },
          "thinking": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "thinking"
        ],
        "title": "ThinkingContent",
        "type": "object"
      },
      "ImageURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ImageURL"
      },
      "Media": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the media"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the media. For example, image/png"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ImageURL"
      },
      "ImageContent": {
        "properties": {
          "type": {
            "const": "image_url",
            "default": "image_url",
            "enum": [
              "image_url"
            ],
            "title": "Type",
            "type": "string"
          },
          "image_url": {
            "$ref": "#/components/schemas/ImageURL"
          },
          "image_variable": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Image Variable"
          }
        },
        "required": [
          "image_url"
        ],
        "title": "ImageContent",
        "type": "object"
      },
      "MediaContent": {
        "properties": {
          "type": {
            "const": "media",
            "default": "media",
            "enum": [
              "media"
            ],
            "title": "Type",
            "type": "string"
          },
          "media": {
            "$ref": "#/components/schemas/Media"
          }
        },
        "required": [
          "media"
        ],
        "title": "MediaContent",
        "type": "object"
      },
      "MediaVariable": {
        "properties": {
          "type": {
            "const": "media_variable",
            "default": "media_variable",
            "enum": [
              "media_variable"
            ],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the media variable"
          }
        },
        "required": [
          "name"
        ],
        "title": "MediaVariable",
        "type": "object"
      },
      "SystemMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                },
                {
                  "$ref": "#/components/schemas/MediaContent"
                },
                {
                  "$ref": "#/components/schemas/MediaVariable"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "image_url": "#/components/schemas/ImageContent",
                  "text": "#/components/schemas/TextContent"
                }
              }
            },
            "type": "array",
            "title": "Content"
          },
          "role": {
            "const": "system",
            "title": "Role",
            "default": "system"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "SystemMessage"
      },
      "UserMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                },
                {
                  "$ref": "#/components/schemas/MediaContent"
                },
                {
                  "$ref": "#/components/schemas/MediaVariable"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "image_url": "#/components/schemas/ImageContent",
                  "text": "#/components/schemas/TextContent"
                }
              }
            },
            "type": "array",
            "title": "Content"
          },
          "role": {
            "const": "user",
            "title": "Role",
            "default": "user"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "UserMessage"
      },
      "AssistantMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextContent"
                    },
                    {
                      "$ref": "#/components/schemas/ThinkingContent"
                    },
                    {
                      "$ref": "#/components/schemas/ImageContent"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "image_url": "#/components/schemas/ImageContent",
                      "text": "#/components/schemas/TextContent",
                      "thinking": "#/components/schemas/ThinkingContent"
                    }
                  }
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "role": {
            "const": "assistant",
            "title": "Role",
            "default": "assistant"
          },
          "function_call": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FunctionCall"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Call",
            "deprecated": true,
            "description": "This field is deprecated. Please use `tool_calls` field to specify tool calls."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          }
        },
        "type": "object",
        "title": "AssistantMessage"
      },
      "FunctionMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextContent"
                    },
                    {
                      "$ref": "#/components/schemas/ImageContent"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "image_url": "#/components/schemas/ImageContent",
                      "text": "#/components/schemas/TextContent"
                    }
                  }
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "role": {
            "const": "function",
            "title": "Role",
            "default": "function"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FunctionMessage"
      },
      "DeveloperMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                },
                {
                  "$ref": "#/components/schemas/MediaContent"
                },
                {
                  "$ref": "#/components/schemas/MediaVariable"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "image_url": "#/components/schemas/ImageContent",
                  "text": "#/components/schemas/TextContent"
                }
              }
            },
            "type": "array",
            "title": "Content"
          },
          "role": {
            "const": "developer",
            "title": "Role",
            "default": "developer"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "DeveloperMessage"
      },
      "MessageFunctionCall": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MessageFunctionCall"
      },
      "ChatPrompt": {
        "properties": {
          "messages": {
            "items": {
              "discriminator": {
                "mapping": {
                  "assistant": "#/components/schemas/AssistantMessage",
                  "function": "#/components/schemas/FunctionMessage",
                  "placeholder": "#/components/schemas/PlaceholderMessage",
                  "system": "#/components/schemas/SystemMessage",
                  "tool": "#/components/schemas/ToolMessage",
                  "user": "#/components/schemas/UserMessage",
                  "developer": "#/components/schemas/DeveloperMessage"
                },
                "propertyName": "role"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/UserMessage"
                },
                {
                  "$ref": "#/components/schemas/AssistantMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolMessage"
                },
                {
                  "$ref": "#/components/schemas/PlaceholderMessage"
                },
                {
                  "$ref": "#/components/schemas/DeveloperMessage"
                }
              ]
            },
            "title": "Messages",
            "type": "array"
          },
          "functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Function"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Functions"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Tool"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Tools"
          },
          "function_call": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/MessageFunctionCall"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Function Call"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ChatToolChoice"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Tool Choice"
          },
          "type": {
            "const": "chat",
            "default": "chat",
            "enum": [
              "chat"
            ],
            "title": "Type",
            "type": "string"
          },
          "input_variables": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Input Variables",
            "type": "array"
          }
        },
        "required": [
          "messages"
        ],
        "title": "Chat Template",
        "type": "object"
      },
      "GetPromptTemplateResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "prompt_name": {
            "type": "string",
            "title": "Prompt Name"
          },
          "prompt_template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "title": "Prompt Template",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              }
            }
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          },
          "llm_kwargs": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Kwargs",
            "description": "When you optionally specify `provider` in the body, `llm_kwargs` will be returned for that specific provider and you can pass these kwargs to the provider's API directly."
          },
          "version": {
            "type": "integer",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "id",
          "prompt_name",
          "prompt_template"
        ],
        "title": "GetPromptTemplateResponse"
      },
      "GetPromptTemplateLabelResponse": {
        "properties": {
          "release_labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prompt_version_id": {
                  "type": "integer"
                },
                "prompt_version_number": {
                  "type": "integer"
                },
                "release_label": {
                  "type": "string"
                },
                "release_label_id": {
                  "type": "integer"
                }
              },
              "required": [
                "prompt_version_id",
                "prompt_version_number",
                "release_label",
                "release_label_id"
              ]
            },
            "title": "Release Labels"
          }
        },
        "type": "object",
        "required": [
          "release_labels"
        ],
        "title": "GetPromptTemplateLabelResponse"
      },
      "BasePromptTemplate": {
        "properties": {
          "prompt_name": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Prompt Name"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "prompt_name"
        ],
        "title": "BasePromptTemplate"
      },
      "PromptVersion": {
        "properties": {
          "prompt_template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "title": "Prompt Template",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              }
            }
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 72
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "prompt_template"
        ],
        "title": "PromptVersion"
      },
      "CreatePromptTemplate": {
        "properties": {
          "prompt_template": {
            "$ref": "#/components/schemas/BasePromptTemplate"
          },
          "prompt_version": {
            "$ref": "#/components/schemas/PromptVersion"
          },
          "release_labels": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "title": "Release Labels"
          }
        },
        "type": "object",
        "required": [
          "prompt_template",
          "prompt_version"
        ],
        "title": "CreatePromptTemplate"
      },
      "CreatePromptTemplateResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "prompt_name": {
            "type": "string",
            "title": "Prompt Name"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "release_labels": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "title": "Release Labels"
          },
          "prompt_template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "title": "Prompt Template",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              }
            }
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          }
        },
        "type": "object",
        "required": [
          "id",
          "prompt_name",
          "tags",
          "prompt_template"
        ],
        "title": "CreatePromptTemplateResponse"
      },
      "ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "ToolMessage": {
        "properties": {
          "input_variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Input Variables",
            "default": []
          },
          "template_format": {
            "type": "string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "default": "f-string"
          },
          "content": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ThinkingContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                },
                {
                  "$ref": "#/components/schemas/MediaContent"
                },
                {
                  "$ref": "#/components/schemas/MediaVariable"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "image_url": "#/components/schemas/ImageContent",
                  "text": "#/components/schemas/TextContent",
                  "thinking": "#/components/schemas/ThinkingContent"
                }
              }
            },
            "type": "array",
            "title": "Content"
          },
          "role": {
            "const": "tool",
            "title": "Role",
            "default": "tool"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content",
          "tool_call_id"
        ],
        "title": "ToolMessage"
      },
      "Tool": {
        "properties": {
          "type": {
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "Tool"
      },
      "ChatToolChoice": {
        "properties": {
          "type": {
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/MessageFunctionCall"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ChatToolChoice"
      },
      "ListPromptTemplates": {
        "properties": {
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/GetPromptTemplateResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "next_num": {
            "type": "integer",
            "title": "Next Num"
          },
          "prev_num": {
            "type": "integer",
            "title": "Prev Num"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "has_next",
          "has_prev",
          "items",
          "next_num",
          "prev_num",
          "page",
          "pages",
          "total"
        ],
        "title": "ListPromptTemplates"
      },
      "PlaceholderMessage": {
        "properties": {
          "input_variables": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Input Variables",
            "type": "array"
          },
          "template_format": {
            "default": "f-string",
            "enum": [
              "f-string",
              "jinja2"
            ],
            "title": "Template Format",
            "type": "string"
          },
          "content": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image_url": "#/components/schemas/ImageContent",
                      "text": "#/components/schemas/TextContent"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextContent"
                    },
                    {
                      "$ref": "#/components/schemas/ImageContent"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Content"
          },
          "raw_request_display_role": {
            "default": "",
            "title": "Raw Request Display Role",
            "type": "string"
          },
          "role": {
            "const": "placeholder",
            "default": "placeholder",
            "enum": [
              "placeholder"
            ],
            "title": "Role",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "PlaceholderMessage",
        "type": "object"
      },
      "LogRequest": {
        "properties": {
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "model": {
            "title": "Model",
            "type": "string"
          },
          "input": {
            "discriminator": {
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "title": "Input"
          },
          "output": {
            "discriminator": {
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "title": "Output"
          },
          "request_start_time": {
            "format": "date-time",
            "title": "Request Start Time",
            "type": "string"
          },
          "request_end_time": {
            "format": "date-time",
            "title": "Request End Time",
            "type": "string"
          },
          "parameters": {
            "default": {},
            "title": "Parameters",
            "type": "object"
          },
          "tags": {
            "default": [],
            "items": {
              "maxLength": 512,
              "type": "string"
            },
            "title": "Tags",
            "type": "array"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "title": "Metadata",
            "type": "object"
          },
          "prompt_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Prompt Name"
          },
          "prompt_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Prompt Id",
            "description": "The ID of the prompt template used for this request. This is useful for tracking which prompt was used in the request."
          },
          "prompt_version_number": {
            "anyOf": [
              {
                "exclusiveMinimum": 0,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Prompt Version Number"
          },
          "prompt_input_variables": {
            "default": {},
            "title": "Prompt Input Variables",
            "type": "object"
          },
          "input_tokens": {
            "default": 0,
            "minimum": 0,
            "title": "Input Tokens",
            "type": "integer"
          },
          "output_tokens": {
            "default": 0,
            "minimum": 0,
            "title": "Output Tokens",
            "type": "integer"
          },
          "price": {
            "default": 0.0,
            "minimum": 0.0,
            "title": "Price",
            "type": "number"
          },
          "function_name": {
            "default": "",
            "title": "Function Name",
            "type": "string"
          },
          "score": {
            "default": 0,
            "maximum": 100,
            "minimum": 0,
            "title": "Score",
            "type": "integer"
          }
        },
        "required": [
          "provider",
          "model",
          "input",
          "output",
          "request_start_time",
          "request_end_time"
        ],
        "title": "LogRequest",
        "type": "object"
      },
      "LogRequestResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "prompt_version": {
            "$ref": "#/components/schemas/PromptVersion"
          }
        },
        "required": [
          "id",
          "prompt_version"
        ],
        "title": "LogRequestResponse",
        "type": "object"
      },
      "BadRequestError": {
        "properties": {
          "success": {
            "const": false,
            "default": false,
            "enum": [
              false
            ],
            "title": "Success",
            "type": "boolean"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "title": "BadRequestError",
        "type": "object"
      },
      "PromptBlueprint": {
        "properties": {
          "prompt_template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompletionPrompt"
              },
              {
                "$ref": "#/components/schemas/ChatPrompt"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/ChatPrompt",
                "completion": "#/components/schemas/CompletionPrompt"
              }
            }
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "prompt_template"
        ],
        "title": "PromptBlueprint"
      },
      "SpanKind": {
        "type": "string",
        "enum": [
          "SpanKind.CLIENT",
          "SpanKind.CONSUMER",
          "SpanKind.INTERNAL",
          "SpanKind.PRODUCER",
          "SpanKind.SERVER"
        ],
        "title": "SpanKind"
      },
      "StatusCode": {
        "type": "string",
        "enum": [
          "StatusCode.ERROR",
          "StatusCode.OK",
          "StatusCode.UNSET"
        ],
        "title": "StatusCode"
      },
      "SpanContext": {
        "type": "object",
        "properties": {
          "trace_id": {
            "type": "string",
            "title": "Trace ID"
          },
          "span_id": {
            "type": "string",
            "title": "Span ID"
          },
          "trace_state": {
            "type": "string",
            "title": "Trace State"
          }
        },
        "required": [
          "trace_id",
          "span_id",
          "trace_state"
        ],
        "title": "SpanContext"
      },
      "SpanStatus": {
        "type": "object",
        "properties": {
          "status_code": {
            "$ref": "#/components/schemas/StatusCode"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "nullable": true
          }
        },
        "required": [
          "status_code"
        ],
        "title": "SpanStatus"
      },
      "SpanResource": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Attributes"
          },
          "schema_url": {
            "type": "string",
            "title": "Schema URL"
          }
        },
        "required": [
          "attributes",
          "schema_url"
        ],
        "title": "SpanResource"
      },
      "Span": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "context": {
            "$ref": "#/components/schemas/SpanContext"
          },
          "kind": {
            "$ref": "#/components/schemas/SpanKind"
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "nullable": true
          },
          "start_time": {
            "type": "integer",
            "title": "Start Time"
          },
          "end_time": {
            "type": "integer",
            "title": "End Time"
          },
          "status": {
            "$ref": "#/components/schemas/SpanStatus"
          },
          "attributes": {
            "type": "object",
            "title": "Attributes"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "title": "Events",
            "default": []
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "title": "Links",
            "default": []
          },
          "resource": {
            "$ref": "#/components/schemas/SpanResource"
          },
          "log_request": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogRequest"
              },
              {
                "type": "null"
              }
            ],
            "title": "Log Request",
            "nullable": true
          }
        },
        "required": [
          "name",
          "context",
          "kind",
          "start_time",
          "end_time",
          "status",
          "attributes",
          "resource"
        ],
        "title": "Span"
      },
      "CreateSpansBulk": {
        "type": "object",
        "properties": {
          "spans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "title": "Spans"
          }
        },
        "required": [
          "spans"
        ],
        "title": "CreateSpansBulk"
      },
      "CreateSpansBulkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "spans": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "title": "Spans"
          },
          "request_logs": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "title": "Request Logs",
            "nullable": true
          }
        },
        "required": [
          "success",
          "spans"
        ],
        "title": "CreateSpansBulkResponse"
      },
      "Dataset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dataset ID"
          },
          "dataset_group_id": {
            "type": "integer",
            "description": "Associated dataset group ID"
          },
          "version_number": {
            "type": "integer",
            "description": "Version number of the dataset"
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of column names in the dataset"
          },
          "filter_params": {
            "type": "object",
            "nullable": true,
            "description": "Filter parameters used to create the dataset"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether the dataset is deleted"
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user who created the dataset"
          },
          "dataset_group": {
            "$ref": "#/components/schemas/DatasetGroup",
            "description": "Associated dataset group information"
          }
        },
        "required": [
          "id",
          "dataset_group_id",
          "version_number",
          "column_names",
          "is_deleted",
          "user_id"
        ],
        "title": "Dataset"
      },
      "DatasetGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dataset group ID"
          },
          "name": {
            "type": "string",
            "description": "Dataset group name"
          },
          "workspace_id": {
            "type": "integer",
            "description": "Associated workspace ID"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether the dataset group is deleted"
          }
        },
        "required": [
          "id",
          "name",
          "workspace_id",
          "is_deleted"
        ],
        "title": "DatasetGroup"
      }
    }
  }
}